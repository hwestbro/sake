#!/usr/bin/env python

###########################################################
##                                                       ##
##   sake.py                                             ##
##                                                       ##
##                Author: Tony Fischetti                 ##
##                        tony.fischetti@gmail.com       ##
##                                                       ##
###########################################################
#
# Copyright (c) 2013, Tony Fischetti
#
# MIT License, http://www.opensource.org/licenses/mit-license.php
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
###########################################################

import argparse
import os.path
import sys
import yaml

from sakelib import acts
from sakelib import audit


parser = argparse.ArgumentParser(description='Build from a Sakefile')

# mandatory arguments (but default is provided)
parser.add_argument("targets",
                    help="targets to build (default=all)",
                    metavar='targets', type=str, nargs='*',
                    default="all")

# optional arguments
parser.add_argument('-v', '--verbose', action='store_true',
                    help="verbose output")

args = parser.parse_args()


# parse sakefile
if not os.path.isfile("Sakefile.yaml"):
    sys.stderr.write("Error: there is no Sakefile to read\n")
    sys.exit(1)
try:
    sakefile = yaml.load(open("Sakefile.yaml", "r").read())
except:
    sys.stderr.write("Error: Sakefile failed to parse as valid YAML\n")
    sys.exit(1)
if not audit.check_integrity(sakefile, args.verbose):
    sys.stderr.write("Error: Sakefile isn't written to specification\n")
    sys.exit(1)
if args.verbose:
    print("Sakefile passes integrity test")


# if 'help' is in one of the targets, none of the targets are run but
# the help strings are printed for each target
if len(args.targets) == 1:
    if args.targets[0] == "help":
        ret_val = acts.print_help(sakefile)
        sys.exit(ret_val)
elif 'help' in args.targets:
    ret_val = acts.print_help(sakefile)
    sys.exit(ret_val)


# if 'all' is in one of the targets, nothing else matters
if len(args.targets) == 1:
    if args.targets[0] == "all":
        if args.verbose:
            print("Going to build all targets")
        ret_val = acts.build_all(sakefile, args.verbose)
        sys.exit(ret_val)
elif 'all' in args.targets:
    if args.verbose:
        print("Going to build all targets")
    ret_val = acts.build_all(sakefile, args.verbose)
    sys.exit(ret_val)


if args.verbose:
    unformatted = "Going to build targets \n  - {}"
    print(unformatted.format('\n  - '.join(args.targets)))
