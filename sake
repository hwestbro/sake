#!/usr/bin/env python

###########################################################
##                                                       ##
##   sake.py                                             ##
##                                                       ##
##                Author: Tony Fischetti                 ##
##                        tony.fischetti@gmail.com       ##
##                                                       ##
###########################################################
#
##############################################################################
#                                                                            #
# Copyright (c) 2013, Tony Fischetti                                         #
#                                                                            #
# MIT License, http://www.opensource.org/licenses/mit-license.php            #
#                                                                            #
# Permission is hereby granted, free of charge, to any person obtaining a    #
# copy of this software and associated documentation files (the "Software"), #
# to deal in the Software without restriction, including without limitation  #
# the rights to use, copy, modify, merge, publish, distribute, sublicense,   #
# and/or sell copies of the Software, and to permit persons to whom the      #
# Software is furnished to do so, subject to the following conditions:       #
#                                                                            #
# The above copyright notice and this permission notice shall be included in #
# all copies or substantial portions of the Software.                        #
#                                                                            #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    #
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    #
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        #
# DEALINGS IN THE SOFTWARE.                                                  #
#                                                                            #
##############################################################################

import argparse
import networkx as nx
import os.path
import sys
import yaml

from sakelib import acts
from sakelib import audit
from sakelib import build

parser = argparse.ArgumentParser(description='Build from a Sakefile')

# mandatory arguments (but default is provided)
parser.add_argument("target",
                    help="targets to build (default=all)",
                    metavar='target', type=str, nargs='?',
                    default="all")

# optional arguments
parser.add_argument('-v', '--verbose', action='store_true',
                    help="verbose output")
parser.add_argument('-f', '--file', action="store", dest="outfile",
                    help="filename to place visualization")

args = parser.parse_args()


# parse sakefile
fname = ""
for name in ["Sakefile", "Sakefile.yaml", "Sakefile.yml"]:
    if os.path.isfile(name):
        fname = name
        break
if not fname:
    sys.stderr.write("Error: there is no Sakefile to read\n")
    sys.exit(1)

try:
    sakefile = yaml.load(file(fname, "r"))
except yaml.YAMLError, exc:
    sys.stderr.write("Error: Sakefile failed to parse as valid YAML\n")
    if hasattr(exc, 'problem_mark'):
        mark = exc.problem_mark
        print "Error position: (%s:%s)" % (mark.line+1, mark.column+1)
        sys.exit(1)
if not audit.check_integrity(sakefile, args.verbose):
    sys.stderr.write("Error: Sakefile isn't written to specification\n")
    sys.exit(1)
if args.verbose:
    print("Sakefile passes integrity test")


# if target is help
if args.target == "help":
    ret_val = acts.print_help(sakefile)
    sys.exit(ret_val)


# get the graph representation
G = nx.DiGraph()
G = acts.construct_graph(sakefile, args.verbose, G)

if args.outfile:
    if args.outfile[-4:] == ".png":
        outfile = args.outfile
    else:
        outfile = args.outfile + ".png"
else:
    outfile = "dependencies.png"


# if target is "visual"
if args.target ==  'visual':
    if args.verbose:
        print("Going to generate dependency graph image")
    ret_val = acts.visualize(G, args.verbose, filename=outfile)
    sys.exit(ret_val)


# if target is "all"
if args.target == 'all':
    if args.verbose:
        print("Going to build target all")
    # if "all" isn't a target in the sakefile, we
    # just run everything
    if "all" not in sakefile:
        retval = build.build_this_graph(G, args.verbose)
        sys.exit(retval)
    # ok, "all" is a listed target in the sakefile
    # lets make a subgraph with only the targets in "all"
    nodes_in_subgraph = []
    for node in G.nodes(data=True):
        if node[0] in sakefile["all"]:
            nodes_in_subgraph.append(node[0])
        elif "parent" in node[1] and node[1]["parent"] in sakefile["all"]:
            nodes_in_subgraph.append(node[0])
    subgraph = G.subgraph(nodes_in_subgraph)
    retval = build.build_this_graph(subgraph, args.verbose)
    sys.exit(retval)

sys.exit(0)

